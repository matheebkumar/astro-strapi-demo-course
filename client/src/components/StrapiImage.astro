---
import  {Image as AstroImage} from 'astro:assets';

interface Props {
    src: string;
    alt?: string | null;
    height: number,
    width: number,
    class?: string;
    loading?: 'lazy' | 'eager';
    quality?: number
    responsive?: boolean;
    aspectRatio?: 'square' | '16:9' | '4:3' | 'auto';
    fallback?: string;
    sizes?: string;
}

const {
    src,
    alt,
    height,
    width,
    loading='lazy',
    quality=80,
    responsive=true,
    aspectRatio = 'auto',
    fallback ='/images/placeholder.svg',
    sizes,
} = Astro.props


if (!src) {
    console.warn('StrapiImage: "src" prop is required');
    return null;
}

if (height <=0 || width <= 0) {
    console.warn('StrapiImage: "height" and "width" must be positive number');
    return null;
}

const styles = {
    container: "overflow-hidden",
    image: "object-cover transition-opacity duration-300",
    responsive: "w-full h-auto",
    square: "aspect-square object-cover",
    widescreen: 'aspect-video object-cover',
    standard: "aspect-[4/3] object-cover"
}

const getAspectRatioClass = () => {
    switch(aspectRatio) {
        case 'square' : return styles.square;
        case '16:9': return styles.widescreen;
        case '4:3': return styles.standard;
        default: return responsive ? styles.responsive : '';
    }
}

function getStrapiMedia( url: string ): string | null {
    try {
        if (!url) return null;

        // Return as-is if it's a data URL (base64)
        if (url.startsWith("data:")) return url;

        // Return as-is if it's a absolute URL
        if (url.startsWith('http') || url.startsWith('//')) return url;

        const BASE_URL = import.meta.env.VITE_STRAPI_BASE_URL ?? "http://localhost:1337"
        return `${BASE_URL}${url}`

    }catch ( error) {
        console.error('StrapiImage: Error processing image URL:', error)
        return fallback;
    }
}

// 
const imageUrl = getStrapiMedia(src);

if(!imageUrl) return null;

const safeAlt = alt || `Image ${width}*${height}`
const imageClasses = `${styles.image} ${getAspectRatioClass()} ${Astro.props.class || ''}`

const responsiveSizes = sizes || (responsive ?  
    "(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw":
    undefined
);

---

<div class = {styles.container}>
    <AstroImage 
        src={imageUrl}
        alt={safeAlt}
        height={height}
        width={width}
        loading={loading}
        quality={quality}
        sizes={responsiveSizes}
        class={imageClasses}
    />
</div>