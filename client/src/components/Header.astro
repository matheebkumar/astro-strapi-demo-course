---
import type { THeader} from "..//types/";
import StrapiImage from "./StrapiImage.astro";

interface Props {
    data: THeader;
    class?: string;
}

const {data} = Astro.props;
if(!data) return null;

const {logo, navItems, cta} = data;

const currentPath = Astro.url.pathname;

const styles = {
  header: "sticky top-0 z-50",
  nav: "relative px-6 py-6 flex justify-between items-center bg-white shadow-sm",
  logo: {
    container: "text-3xl font-bold leading-none flex items-center",
    image: "h-12 w-12",
  },
  mobileButton:
    "lg:hidden flex items-center text-green-600 p-3 hover:text-green-700 transition-colors",
  menuIcon: "block h-4 w-4 fill-current",
  desktopNav:
    "hidden absolute top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2 lg:mx-auto lg:flex lg:items-center lg:w-auto lg:space-x-6",
  navLink: {
    base: "text-sm font-bold transition-colors",
    active: "text-green-600",
    inactive: "text-gray-400 hover:text-gray-500",
  },
  cta: "hidden lg:inline-block py-2 px-6 bg-green-500 hover:bg-green-600 text-sm text-white font-bold rounded-l-xl rounded-t-xl transition duration-200 focus:outline-none focus:ring-2 focus:ring-green-500",
  mobileMenu: {
    container:
      "navbar-menu fixed top-0 left-0 bottom-0 w-5/6 max-w-sm z-50 hidden",
    backdrop: "navbar-backdrop fixed inset-0 bg-gray-800 opacity-25",
    nav: "relative flex flex-col py-6 px-6 h-full w-full bg-white border-r overflow-y-auto",
    header: "flex items-center mb-8",
    logoContainer: "mr-auto text-3xl font-bold leading-none",
    closeButton: "navbar-close p-2 hover:bg-gray-100 rounded transition-colors",
    closeIcon: "h-6 w-6 text-gray-400 cursor-pointer hover:text-gray-500",
    navList: "space-y-1",
    navItem: "mb-1",
    navItemLink:
      "block p-4 text-sm font-semibold text-gray-400 hover:bg-green-50 hover:text-green-600 rounded transition-colors",
    footer: "mt-auto pt-6",
    mobileCta:
      "block px-4 py-3 mb-2 leading-loose text-xs text-center text-white font-semibold bg-green-600 hover:bg-green-700 rounded-l-xl rounded-t-xl transition-colors focus:outline-none focus:ring-2 focus:ring-green-500",
  },
};

---

<header class={`${styles.header} ${Astro.props.class || ""}`}>
  <nav class={styles.nav}>
    <a class={styles.logo.container} href={logo.href}>
      <StrapiImage
        class={styles.logo.image}
        src={logo.image.url}
        alt={logo.image.alternativeText}
        height={48}
        width={48}
      />
    </a>

    <div class="lg:hidden">
      <button
        class={styles.mobileButton}
        id="burger-button"
        aria-label="Open mobile menu"
      >
        <svg
          class={styles.menuIcon}
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <title>Mobile menu</title>
          <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path>
        </svg>
      </button>
    </div>

    <ul class={styles.desktopNav}>
      {
        navItems.map((item) => (
          <li>
            <a
              class={`${styles.navLink.base} ${
                currentPath === item.href
                  ? styles.navLink.active
                  : styles.navLink.inactive
              }`}
              href={item.href}
              target={item.isExternal ? "_blank" : "_self"}
              rel={item.isExternal ? "noopener noreferrer" : undefined}
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>

    {
      cta && (
        <a
          class={styles.cta}
          href={cta.href}
          target={cta.isExternal ? "_blank" : "_self"}
          rel={cta.isExternal ? "noopener noreferrer" : undefined}
        >
          {cta.label}
        </a>
      )
    }
  </nav>

  <div class={styles.mobileMenu.container} id="navbar-menu">
    <div id="navbar-backdrop" class={styles.mobileMenu.backdrop}></div>
    <nav class={styles.mobileMenu.nav}>
      <div class={styles.mobileMenu.header}>
        <a class={styles.mobileMenu.logoContainer} href={logo.href}>
          <StrapiImage
            class={styles.logo.image}
            src={logo.image.url}
            alt={logo.image.alternativeText}
            height={48}
            width={48}
          />
        </a>
        <button
          id="navbar-close"
          class={styles.mobileMenu.closeButton}
          aria-label="Close mobile menu"
        >
          <svg
            class={styles.mobileMenu.closeIcon}
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div>
        <ul class={styles.mobileMenu.navList}>
          {
            navItems.map((item) => (
              <li class={styles.mobileMenu.navItem}>
                <a
                  class={`${styles.mobileMenu.navItemLink} ${
                        currentPath === item.href
                        ? styles.navLink.active
                        : styles.navLink.inactive}`}
                  href={item.href}
                  target={item.isExternal ? "_blank" : "_self"}
                  rel={item.isExternal ? "noopener noreferrer" : undefined}
                >
                  {item.label}
                </a>
              </li>
            ))
          }
        </ul>
      </div>

      <div class={styles.mobileMenu.footer}>
        {
          cta && (
            <a
              class={styles.mobileMenu.mobileCta}
              href={cta.href}
              target={cta.isExternal ? "_blank" : "_self"}
              rel={cta.isExternal ? "noopener noreferrer" : undefined}
            >
              {cta.label}
            </a>
          )
        }
      </div>
    </nav>
  </div>
</header>

<script>
    const burgerButton = document.getElementById("burger-button");
    const navbarMenu = document.getElementById("navbar-menu");
    const closeButton = document.getElementById("navbar-close");
    const backdrop = document.getElementById("navbar-backdrop");

    function handleMenuOpen() {
        if(navbarMenu) {
            navbarMenu.classList.remove("hidden");
            document.body.style.overflow="hidden";
        }
    }

    function handleMenuClose() {
        if(navbarMenu) {
            navbarMenu.classList.add("hidden");
            document.body.style.overflow="";
        }
    }

    function hanldeKeyPress(event: KeyboardEvent) {
        if (event.key == "Escape") {
            handleMenuClose();
        }
    }

    if (burgerButton && navbarMenu && closeButton && backdrop) {
        burgerButton.addEventListener("click", handleMenuOpen);
        closeButton.addEventListener("click", handleMenuClose);
        backdrop.addEventListener("click",handleMenuClose);
        document.addEventListener("keydown",hanldeKeyPress);
    }

</script>